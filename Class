class Student:
    def __init__(self, name, surname, gender):
        self.name = name
        self.surname = surname
        self.gender = gender
        self.finished_courses = []
        self.courses_in_progress = []
        self.grades = {}

    def rate_lecturer(self, lecturer, course, grade):
        if isinstance(lecturer, Lecturer) and course in self.courses_in_progress and course in lecturer.courses_attached:
            if course in lecturer.grades:
                lecturer.grades[course] += [grade]
            else:
                lecturer.grades[course] = [grade]
        else:
            return 'Ошибка'  

    def _average_grades_student(self, ): 
        for k, v in self.grades: 
                avetage_grade_s = sum(v) / len(v)
        return avetage_grade_s

    def __str__(self):
        return f'Имя: {self.name} \nФамилия: {self.surname} \nСредняя оценка за домашние задания: {self._average_grades_student} \nКурсы в процессе изучения: {self.courses_in_progress} \nЗавершенные курсы:{self.finished_courses}'

    def __lt__(self, other):
        if not isinstance(other, Student):
            print('Ошибка')
            return
        return self._average_grades_student < other._average_grades_student
        
class Mentor:
    def __init__(self, name, surname):
        self.name = name
        self.surname = surname
        self.courses_attached = []
        
class Lecturer(Mentor):
    def __init__(self, name, surname):
        super().__init__(name, surname)
        self.grades = {}
    
    def _average_grades_lecture(self): 
        for k, v in self.grades: 
            avetage_grade_l = sum(v) / len(v)
        return avetage_grade_l
        
    def __str__(self):
        return f'Имя: {self.name} \nФамилия: {self.surname} \nСредняя оценка за лекции: {self._average_grades_lecture}'
    
    def __lt__(self, other):
        if not isinstance(other, Lecturer):
            print('Ошибка')
            return
        return self._average_grades_lecture < other._average_grades_lecture

class Reviewer(Mentor):
    def __init__(self, name, surname):
        super().__init__(name, surname)

    def rate_hw(self, student, course, grade):
        if isinstance(student, Student) and course in self.courses_attached and course in student.courses_in_progress:
            if course in student.grades:
                student.grades[course] += [grade]
            else:
                student.grades[course] = [grade]
        else:
            return 'Ошибка'
    def __str__(self):
        return f'Имя: {self.name} \nФамилия: {self.surname}'


student_1 = Student('Stefan', 'Senko', 'man')
student_1.finished_courses += ['Git']
student_1.courses_in_progress += ['Python']

student_2 = Student('July', 'Panko', 'transformer')
student_2.finished_courses += ['Git']
student_2.courses_in_progress += ['Python']

lecturer_1 = Lecturer('Jan', 'Kohlweit')
lecturer_1.courses_attached += ['Python']

lecturer_2 = Lecturer('Radovid', 'Ferocious')
lecturer_2.courses_attached += ['Git']

reviewer_1 = Reviewer('Ciri', 'Nova')

reviewer_2 = Reviewer('Nacker', 'Golden')

student_1.rate_lecturer(lecturer_1, 'Python', 9)
student_1.rate_lecturer(lecturer_1, 'Python', 8)
student_1.rate_lecturer(lecturer_1, 'Python', 10)

student_2.rate_lecturer(lecturer_1, 'Python', 5)
student_2.rate_lecturer(lecturer_1, 'Python', 6)
student_2.rate_lecturer(lecturer_1, 'Python', 7)

reviewer_1.rate_hw(student_1, 'Python', 8)
reviewer_1.rate_hw(student_1, 'Python', 9)
reviewer_1.rate_hw(student_1, 'Python', 7)

reviewer_2.rate_hw(student_1, 'Python', 3)
reviewer_2.rate_hw(student_1, 'Python', 3)
reviewer_2.rate_hw(student_1, 'Python', 3)

reviewer_1.rate_hw(student_2, 'Python', 10)
reviewer_1.rate_hw(student_2, 'Python', 6)
reviewer_1.rate_hw(student_2, 'Python', 8)

reviewer_2.rate_hw(student_2, 'Python', 3)
reviewer_2.rate_hw(student_2, 'Python', 3)
reviewer_2.rate_hw(student_2, 'Python', 3)

print(f'Студенты: \n{student_1} \n{student_2}')
print(f'\n')
print(f'Лекторы: \n{lecturer_1} \n{lecturer_2}')
print(f'\n')
print(f'Ревьеры: \n{reviewer_1} \n{reviewer_2}')
print(f'\n')

student_list = [student_1, student_2]

lecturer_list = [lecturer_1, lecturer_2]

def student_rating(student_list, course_name):
    sum_all = 0
    count_all = 0
    for stud in student_list:
       if stud.courses_in_progress == [course_name]:
            sum_all += stud._average_grades_student
            count_all += 1
    average_for_all = sum_all / count_all
    return average_for_all

def lecturer_rating(lecturer_list, course_name):

    sum_all = 0
    count_all = 0
    for lect in lecturer_list:
        if lect.courses_attached == [course_name]:
            sum_all += lect._average_grades_lecture
            count_all += 1
    average_for_all = sum_all / count_all
    return average_for_all

print(f"Средняя оценка для всех студентов по курсу {'Python'}: {student_rating(student_list, 'Python')}")
print(f'\n')

print(f"Средняя оценка для всех лекторов по курсу {'Python'}: {lecturer_rating(lecturer_list, 'Python')}")
print(f'\n')